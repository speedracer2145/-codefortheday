import numpy as np
c="abcdefghijklmnopqrstuvwxyz"
a=input()
k=input()
l = [[0] * len(a) for _ in range(len(a))]
m = [[0] * 1 for _ in range(len(a))]
ans = [[0] * 1 for _ in range(len(a))]
ansi = np.zeros((len(a), 1))
#arr=np.array(l)
#inverse=np.linalg.pinv(arr)
def determinant_3x3(matrix):
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]

    return (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g))%26
def transpose(matrix):
    return [[matrix[j][i] for j in range(3)] for i in range(3)]

def adjugate(matrix):
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]

    return [
        [(e * i - f * h)%26, -(b * i - c * h)%26, (b * f - c * e)%26],
        [-(d * i - f * g)%26, (a * i - c * g)%26, -(a * f - c * d)%26],
        [(d * h - e * g)%26, -(a * h - b * g)%26, (a * e - b * d)%26]
    ]

def matrix_inverse_3x3(matrix):
    det = determinant_3x3(matrix)
    #inv_det = 1.0 / det
    adj = adjugate(matrix)
    inverse_matrix = [[det * adj[i][j] for j in range(3)] for i in range(3)]
    return inverse_matrix

def createkeymatrix(k):
    o=0
    for i in range(len(a)):
        for j in range(len(a)):
            if o<len(k):
                l[i][j]=c.index(k[o])
            o+=1
def createinputmatrix(a):
    o=0
    for i in range(len(a)):
        for j in range(1):
            if o<len(a):
                m[i][j]=c.index(a[o])
            o+=1
def multiply():
    for i in range(len(a)):
        for j in range(len(m[0])):
            ans[i][j]=0
            for r in range(len(a)):
                ans[i][j]+=l[i][r]*m[r][j]
def multiplyinv(s):
    #print(s)
    for i in range(len(a)):
        for j in range(len(m[0])):
            ansi[i][j]=0
            for r in range(len(a)):
                ansi[i][j]+=s[i][r]*(ans[r][j]%26)
    #print(ansi)
def encrypt(a,k):
    mes=""
    createkeymatrix(k)
    createinputmatrix(a)
    multiply()
    for i in range(len(ans)):
        for j in range(len(ans[0])):
            mes+=c[ans[i][j]%26]
    return mes
def decrypt():
    mes=""
    s=matrix_inverse_3x3(l)
    multiplyinv(s)
    for i in range(len(ans)):
        for j in range(len(ans[0])):
            mes+=c[int(ansi[i][j])%26]
    return mes
mess=encrypt(a,k)
de=decrypt()
print(mess)
#print(l)
#print(np.linalg.inv(np.array(l)))
#print(ansi)
print(de)
